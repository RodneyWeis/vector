<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vector_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Vector

x = (room_width / 2);
y = (room_height / 2);

img_spd = 0.2;

direction = 270;
sprite_index = spr_vector_idle;

spd = 2;
fast_spd = 4;
player_spd = spd;
image_speed = img_spd;

monster = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step event - Vector

if keyboard_check_pressed(ord('M')) {
   monster = (!monster);
   if (monster) {
       sprite_index = spr_vector_to_monster;
   } else {
       sprite_index = spr_monster_to_vector;
   }
}

if (monster) {
   // Move Left
    if keyboard_check(vk_left) {
       sprite_index = spr_monster_left;
       x -= player_spd;
    }
    
    // Move Right
    if keyboard_check(vk_right) {
       sprite_index = spr_monster_right;
       x += player_spd;
    }
    
    // Move Down
    if keyboard_check(vk_down) {
       sprite_index = spr_monster_down;
       y += player_spd;
    }
    
    // Move Up
    if keyboard_check(vk_up) {
       sprite_index = spr_monster_up;
       y -= player_spd;
    }
} else {
    // Move Left
    if keyboard_check(vk_left) {
       sprite_index = spr_vector_left;
       x -= player_spd;
    }
    
    // Move Right
    if keyboard_check(vk_right) {
       sprite_index = spr_vector_right;
       x += player_spd;
    }
    
    // Move Down
    if keyboard_check(vk_down) {
       sprite_index = spr_vector_down;
       y += player_spd;
    }
    
    // Move Up
    if keyboard_check(vk_up) {
       sprite_index = spr_vector_up;
       y -= player_spd;
    }
}

if (keyboard_check_released(vk_right) || keyboard_check_released(vk_left) || keyboard_check_released(vk_down) || keyboard_check_released(vk_up)) {
   if (monster) {
      sprite_index = spr_monster_idle;
   } else {
      sprite_index = spr_vector_idle;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
